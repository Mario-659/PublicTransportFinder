
plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'

    id 'org.openjfx.javafxplugin' version '0.0.9'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'

    // Library for parsing json https://mvnrepository.com/artifact/org.json/json
    implementation 'org.json:json:20211205'
}

javafx {
    version = "11.0.2"
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.web' ]
//    // Uncomment to make cross-platform without native binaries -> https://github.com/openjfx/javafx-gradle-plugin#4-cross-platform-projects-and-libraries
//    configuration = 'compileOnly'
}

application {
    // Define the main class for the application.
    mainClass = 'PublicTransportFinder.Start'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

sourceSets.main {
    java {
        srcDir 'src/main/java'
    }
    resources {
        srcDirs = ['src/main/java', 'src/main/resources']
        exclude "**/*.java"
    }
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'PublicTransportFinder.Start'
    }
    archiveClassifier = "all"
    from {
        configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar

    duplicatesStrategy "exclude"
}